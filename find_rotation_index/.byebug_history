c
arr.size
arr
c
arr.size
arr
exit
arr2
arr1
arr
cc
c
cc
c
cc
c
cc
c
cc
ccc
c
exit
arr1
c
arr2
arr1.last
arr1
c
arr2
arr1
c
arr2
arr1
exit
arr2
arr1
arr1.last
arr
c
arr
c
arr
c
arr
arr1.last
c
exit
c
cc
c
cc
c
arr[partition...arr.size]
arr[0...partition]
arr.size
arr
arr[partition...arr.size]
arr[partition+1...arr.size]
arr[partition+1...arr.size-1]
arr[partition...arr.size-1]
arr[0...partition]
arr[partition...arr.size-1]
arr[0..partition]
n
right[0] < left[0] && arr.size === 2
right
left
exit
rand(0..arr.size)
c
exit
c
right
left
n
arr.size
rand(arr.size)
arr
c
arr
c
self[0..partition].find_rotation_index
partition
self[0..partition]
exit
self
right
@original.index(right)
@original
c
exit
c
exit
@original
c
original
exit
@orginal
exit
@orginal
c
right
left
right[0] < left[0]
self
right
size
